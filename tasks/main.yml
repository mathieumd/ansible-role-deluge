---
# tasks file for deluge

######################################################################
# Packages
######################################################################

- name: Add Deluge PPA
  apt_repository: repo=ppa:deluge-team/ppa state=present

- name: Install Deluge
  apt: name="{{ item }}"
       state=latest update_cache=yes cache_valid_time=86400
  with_items:
    - deluged
    - deluge-console

- name: Install Deluge Web UI
  apt: name=deluge-web state=latest
  when: deluge_web

######################################################################
# User deluge
######################################################################

- name: Create user
  user: name="{{ deluge_user }}" group="{{ deluge_group }}"
        system=yes state=present

#=====================================================================

- name: Check if user's home is correct
  command: egrep "^{{ deluge_user}}:.*:{{ deluge_home }}:" /etc/passwd
  ignore_errors: yes
  register: user_home
  changed_when: false

- name: Temporarily stop deluged (if present and running)
  service: name=deluged state=stopped
  ignore_errors: yes
  notify: Restart deluged
  when: user_home.rc == 1

- name: Set user's home
  user: name="{{ deluge_user }}" home="{{ deluge_home }}"
        move_home=yes
  when: user_home.rc == 1

######################################################################
# System
######################################################################
# http://dev.deluge-torrent.org/wiki/UserGuide/Service/Upstart

- name: Deploy Upstart startup scripts
  template: src="{{ item }}.j2" dest="/etc/init/{{ item }}"
            owner=root group=root mode=0755
  with_items:
    - deluged.conf
    - deluge-web.conf
  notify: Restart deluged

- name: Create log directory
  file: dest="{{ deluge_logs }}"
        recurse=yes state=directory
        owner="{{ deluge_user }}" group="{{ deluge_group }}" mode=0750

- name: Deploy Logrotate configuration
  template: src=logrotate_deluge.j2 dest=/etc/logrotate.d/deluge
            owner=root group=root mode=0755

######################################################################
# Configuration
######################################################################

- name: Check that core.conf file is present
  stat: path='{{ deluge_home }}/.config/deluge/core.conf'
  changed_when: false
  register: file_coreconf

# Let deluged create the core.conf file then stop it
- name: Start deluged daemon if just installed
  service: name=deluged state=started
  when: file_coreconf.stat.exists is defined and file_coreconf.stat.exists == false

- name: Pause 2s before stopping deluged
  pause: seconds=2
  when: file_coreconf.stat.exists is defined and file_coreconf.stat.exists == false

- name: Stop deluged so it write-down its conf file
  service: name=deluged state=stopped
  notify: Restart deluged
  when: file_coreconf.stat.exists is defined and file_coreconf.stat.exists == false

#=====================================================================

- name: Enable remote access
  replace:
    dest: '{{ deluge_home }}/.config/deluge/core.conf'
    regexp: '^(.*"allow_remote"): .*'
    replace: '\1: true, '
  notify: Restart deluged
  when: deluge_allow_remote

- name: Add Deluge's own users
  lineinfile: dest="{{ deluge_home }}/.config/deluge/auth"
              regexp="^{{ item.key }}:"
              line="{{ item.key }}:{{ lookup('password', '../vars/deluge_users/' + item.key) }}:{{ item.value.level }}"
  with_dict: deluge_users
  notify: Restart deluged

######################################################################
# Finally, start deluged
######################################################################

- name: (Re)start deluged daemon
  service: name=deluged state=started enabled=yes

# vim: ft=ansible
